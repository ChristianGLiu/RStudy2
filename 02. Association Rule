data<-read.csv("top_supermarket_transactions.csv")

row.names(data)<-data[[1]]
data<-subset(data, select = c(-1))

data['milk',]
sort(data['milk',], decreasing=TRUE)

data['bread',]
sort(data['bread',], decreasing=TRUE)


mosaicplot(as.matrix(data),
color=TRUE,
title(main="Products Contingency Mosaic Plot"),
las=2
) 

//Recomendations based on global products continegncy matrix 
cat("Recomendations based on global products continegncy matrix")
data
items<-names(data)
items

for (item in items) {
	cat(paste("Top 2 recommended items to by with", item, "are:"))
	item.data<-subset(data[item,], select=names(data)[!names(data) %in% item])
	cat(names(item.data[order(item.data, decreasing=TRUE)][c(1,2)]))
	cat("\n")
	}

data(Groceries)
	
install.packages("arules")
library(arules)

library(Matrix)
library(arules)

data(Groceries)
inspect(Groceries[1:3])

ct<-crossTable(Groceries, measure="count", sort=TRUE)
write.csv(ct, "ct.csv")
ct[1:5,1:5]

ct<-crossTable(Groceries, measure="support", sort=TRUE)
ct[1:5,1:5]


ct<-crossTable(Groceries, measure="lift", sort=TRUE)
ct[1:5,1:5]

//frequent itemset generation 

install.packages("dplyr")
install.packages("gridExtra")

library(dplyr)
library(gridExtra)

## 벡터를 리스트로 만드는 함수 생성

## Utility function: Appends vectors to a list
list.append <- function (mylist, ...){
  mylist <- c(mylist, list(...))
  return(mylist)
}

aa<-1:5
list.append(aa)



####### 함수 생성 해보기  시작~ 

## 1단계: 데이터 세트를 파일로부터 읽는 함수 
get_transaction_dataset <- function(filename){
  
  df <- read.csv(filename, header = FALSE)
  dataset <- list()
  
  for (index in seq(nrow(df))){
    transaction.set <- as.vector(unlist(df[index,]))
    transaction.set <- transaction.set[transaction.set != ""]
    dataset <- list.append(dataset, transaction.set)
  }
  
  return(dataset)
  }

## 2단계: 데이터 세트를 데이터 프레임으로 변환하는 함수 
## unlist로 리스트를 벡터로 만들고
## table로 벡터의 freq table을 생성
## 가로 형태의 freq table을 data.frame을 이용하여 세로 형태로 변환 
get_item_freq_table <- function(dataset){
  item.freq.table <- unlist(dataset) %>% table %>% data.frame
  return (item.freq.table)
}


##3단계: 최소 빈도수를 기준으로 아이템을 잘라내는 함수
## 입력한 item.min.freq의 개수보다 freq가 큰 item만 저장하여 pruned.item.table에 저장
prune_item_freq_table <- function(item.freq.table, item.min.freq){
  pruned.item.table <- item.freq.table[item.freq.table$Freq >= item.min.freq,]
  return (pruned.item.table)
}

## 4단계 pruned.item.table에 존재하는 item을 이용하여, num.items개의 아이템을 가진 아이템 셋트 생성 
## 
get_associated_itemset_combinations <- function(pruned.item.table, num.items){
  itemset.associations <- c()
	## num.item개의 item이 들어 있는 item matrix 생성 (num.item의 행의 개수)
	## pruned.item.table$. --> pruned.item.table$Var1 변경함 (함수에서는 .으로 진행 line 실행시 Var1 ) 
  itemset.association.matrix <- combn(pruned.item.table$., num.items)
  ## 
  for (index in seq(ncol(itemset.association.matrix))){
	## Matrix의 한 컬럼을 성분으로 갖는 벡터 만들기 (컬럼 개수 만큼의 vector 생성)
    itemset.associations <- c(itemset.associations,
							## matrix의 하나의 컬럼에 있는 item을 comma 구분으로 가로로 쓰기 
                              paste(itemset.association.matrix[,index],
                                    collapse = ", ")
                            )
  }
  itemset.associations <- unique(itemset.associations)
  return (itemset.associations)
}

## Step 5: Function to build an itemset association matrix where we 
##         see a contingency table showing itemset association occurence
##         in each transaction of the dataset
build_itemset_association_matrix <- function(dataset, itemset.association.labels, 
                                             itemset.combination.nums){
  ## dataset의 itemset 구성을 vector로 생성
  itemset.transaction.labels <- sapply(dataset, paste, collapse=", ")
  ## itemset.association.labels을 꼼마 없이 리스트로 생성 
  ## strsplit(a,b): a의 내용을 b를 구분자로 나누어 리스트로 저장 
  itemset.associations <- lapply(itemset.association.labels, 
                              function(itemset){
                                unlist(strsplit(itemset, ", ", 
                                                fixed = TRUE)
                                       )
                              }
                          )
						  
  # building the itemset association matrix 
  ## NA와 1로 만들어진 Association.vector 생성 
  association.vector <- c()
  for (itemset.association in itemset.associations){
    association.vector <- c(association.vector,
           unlist(
             lapply(dataset, 
                    function(dataitem, num.items=itemset.combination.nums){ 
                      m <- match(dataitem, itemset.association)
                      m <- length(m[!is.na(m)])
                      if (m == num.items){
                        1
                      }else{
                        NA
                      }
                    }
             )
           )
    )
  }
  
  ## Association.vector를 matrix로 만들기 
  itemset.association.matrix <- matrix(association.vector, nrow = length(dataset))
  
  ## Matrix의 label 만들기 
  itemset.association.labels <- sapply(itemset.association.labels, 
                                       function(item) {
                                         paste0('{', paste(item, collapse = ', '), '}')
                                       }
                                )
  itemset.transaction.labels <- sapply(dataset, 
                                    function(itemset){
                                      paste0('{', paste(itemset, collapse = ', '), '}')
                                    }
                                )
  colnames(itemset.association.matrix) <- itemset.association.labels
  rownames(itemset.association.matrix) <- itemset.transaction.labels
  
  return (itemset.association.matrix)
}





## Step 6: Function to generate total occurrences of each itemset in the
##         transactional dataset based on data from the association matrix
## 각 itemset에 대한 발생 회수 Sum  
## apply 함수는 apply(x, margin, fun): x의 행/열에 대해 지정된 함수를 적용하는 함수, margin=1이면 row, margin=2이면 column 
get_frequent_itemset_details <- function(itemset.association.matrix){
  frequent.itemsets.table <- apply(itemset.association.matrix, 2, sum, na.rm=TRUE)
  return (frequent.itemsets.table)
}



## Step 7: Function containing entire workflow to generate frequent itemsets
frequent.itemsets.generator <- function(data.file.path, itemset.combination.nums=2, 
                                        item.min.freq=2, minsup=0.2){
  # get the dataset
  dataset <- get_transaction_dataset(data.file.path)
  
  # convert data into item frequency table
  item.freq.table <- get_item_freq_table(dataset)
  pruned.item.table <- prune_item_freq_table(item.freq.table, item.min.freq)
  
  # get itemset associations
  itemset.association.labels <- get_associated_itemset_combinations(pruned.item.table, 
                                                                    itemset.combination.nums)
  itemset.association.matrix <- build_itemset_association_matrix(dataset, 
                                                                 itemset.association.labels, 
                                                                 itemset.combination.nums)
  
  # generate frequent itemsets
  frequent.itemsets.table <- get_frequent_itemset_details(itemset.association.matrix)
  frequent.itemsets.table <- sort(frequent.itemsets.table[frequent.itemsets.table > 0], 
                                  decreasing = TRUE)
  
  ## frequent.itemsets.table에서 이름과, 건수를 분리하여 vector로 생성 
  frequent.itemsets.names <- names(frequent.itemsets.table)
  frequent.itemsets.frequencies <- as.vector(frequent.itemsets.table)
  
  ## 각 itemset에 대해서 support 계산 
  frequent.itemsets.support <- round((frequent.itemsets.frequencies * 100) / length(dataset), 
                                     digits=2)
  
  ## 지지도가 있는 data frame 생성 
  frequent.itemsets <- data.frame(Itemset=frequent.itemsets.names,
                                  Frequency=frequent.itemsets.frequencies,
                                  Support=frequent.itemsets.support)
  # apply minimum support cutoff to get frequent itemsets
  ## 지지도값이 최소값 보다 큰 경우만 data frame에서 추출하고,  숫자만 있던 support 값에 %붙임 
  minsup.percentage <- minsup * 100
  frequent.itemsets <- subset(frequent.itemsets, frequent.itemsets['Support'] >= minsup.percentage)
  frequent.itemsets.support <- sapply(frequent.itemsets.support,
                                      function(value){
                                        paste0(value,'%')
                                      }
                               )
  
  # printing to console
  cat("\nItem Association Matrix\n")
  print(itemset.association.matrix)
  cat("\n\n")
  cat("\nValid Frequent Itemsets with Frequency and Support\n")
  print(frequent.itemsets)
  
  # displaying frequent itemsets as a pretty table
  if (names(dev.cur()) != "null device"){
    dev.off()
  }
  grid.table(frequent.itemsets)
}

####### 함수 생성 해보기 끝 ~~~  

library(dplyr)
library(gridExtra)
library(grid)


frequent.itemsets.generator(data.file.path='shopping_transaction_log.csv', itemset.combination.nums=3, item.min.freq=1, minsup=0.2)  






## 함수를 단계별로 실행해 보기
data.file.path<-'shopping_transaction_log.csv'
item.min.freq<-1
itemset.combination.nums<-3
minsup<-0.2

## 1단계 
dataset <- get_transaction_dataset(data.file.path)
dataset

##2~3단계
item.freq.table <- get_item_freq_table(dataset)
item.freq.table
pruned.item.table <- prune_item_freq_table(item.freq.table, item.min.freq)
pruned.item.table 


##4~5단계
itemset.association.labels <- get_associated_itemset_combinations(pruned.item.table, itemset.combination.nums)
itemset.association.labels
itemset.association.matrix <- build_itemset_association_matrix(dataset,itemset.association.labels,itemset.combination.nums)
itemset.association.matrix 


## 6단계 
frequent.itemsets.table <- get_frequent_itemset_details(itemset.association.matrix)
frequent.itemsets.table
frequent.itemsets.table <- sort(frequent.itemsets.table[frequent.itemsets.table > 0],decreasing = TRUE)
frequent.itemsets.table

## frequent.itemsets.table에서 이름과, 건수를 분리하여 vector로 생성 
frequent.itemsets.names <- names(frequent.itemsets.table)
frequent.itemsets.names
frequent.itemsets.frequencies <- as.vector(frequent.itemsets.table)
frequent.itemsets.frequencies
  
  
## 각 itemset에 대해서 support 계산 
frequent.itemsets.support <- round((frequent.itemsets.frequencies * 100) / length(dataset), digits=2)
frequent.itemsets.support

## 지지도가 있는 data frame 생성 
frequent.itemsets <- data.frame(Itemset=frequent.itemsets.names,
                                Frequency=frequent.itemsets.frequencies,
                                Support=frequent.itemsets.support)
frequent.itemsets

## 지지도값이 최소값 보다 큰 경우만 data frame에서 추출하고,  숫자만 있던 support 값에 %붙임 
minsup.percentage <- minsup * 100
minsup.percentage
frequent.itemsets <- subset(frequent.itemsets, frequent.itemsets['Support'] >= minsup.percentage)
frequent.itemsets
frequent.itemsets.support <- sapply(frequent.itemsets.support,
                                    function(value){
                                      paste0(value,'%')
                                    }
                             )
frequent.itemsets.support


##디스플레이
  # printing to console
  cat("\nItem Association Matrix\n")
  print(itemset.association.matrix)
  cat("\n\n")
  cat("\nValid Frequent Itemsets with Frequency and Support\n")
  print(frequent.itemsets)
  
  # displaying frequent itemsets as a pretty table
  if (names(dev.cur()) != "null device"){
    dev.off()
  }
  grid.table(frequent.itemsets)
}





## 식료품 데이터 분석 
Groceries


# 패키지 로딩 
install.packages("arulesViz")
library(arules)
library(arulesViz)

## loading dataset
data(Groceries)

## 10개의 최다 구매 물품 
## type 값: "absolute"는 count값,  "relative"는 support값 default는 relative 
sort(itemFrequency(Groceries, type="absolute"), decreasing = TRUE)[1:10]
# visualizing the top ten purchased products
itemFrequencyPlot(Groceries,topN=10,type="absolute")

## 연관관계 규칙 만들기 
metric.params <- list(supp=0.001, conf=0.5)
rules <- apriori(Groceries, parameter = metric.params)
inspect(rules[1:5])



## 어프라이어리의 중복 규칙 가지 치기 
prune.dup.rules <- function(rules){
  rule.subset.matrix <- is.subset(rules, rules)
  rule.subset.matrix[lower.tri(rule.subset.matrix, diag=T)] <- NA
  dup.rules <- colSums(rule.subset.matrix, na.rm=T) >= 1
  pruned.rules <- rules[!dup.rules]
  return(pruned.rules)
}


## 신뢰도 값으로 정렬하여 규칙 보기 
rules <- sort(rules, by="confidence", decreasing=TRUE)
rules <- prune.dup.rules(rules)
inspect(rules[1:5])


## 향상도로 정렬하여 규칙 보기 
rules<-sort(rules, by="lift", decreasing=TRUE)
rules <- prune.dup.rules(rules)
inspect(rules[1:5])

## 고객이 연관관계 우변에 있는 아이템 구매 했을 때 장바구니에 넣을 수 있는 아이템 예측 하기 
## 에러 발생하는 경우 prune.dup.rules 실행하지 않기 
metric.params <- list(supp=0.001,conf = 0.5, minlen=2)
rules<-apriori(data=Groceries, parameter=metric.params, 
               appearance = list(default="lhs",rhs="soda"),
               control = list(verbose=F))

# rules<-sort(rules, decreasing=TRUE,by="confidence")
inspect(rules[1:5])


##고객이 연관관계 좌변에 있는 아이템 구매 했을 때 장바구니에 넣을 수 있는 아이템 예측 하기 
# finding items which are bought when we have an itemset on LHS
metric.params <- list(supp=0.001,conf = 0.3, minlen=2)
rules<-apriori(data=Groceries, parameter=metric.params, 
               appearance = list(default="rhs",lhs=c("yogurt", "sugar")),
               control = list(verbose=F))
rules<-sort(rules, decreasing=TRUE,by="confidence")
inspect(rules[1:5])



## 연관관계 규칙 시각화 
library(arulesViz)
plot(rules,method="graph",interactive=TRUE,shading=TRUE)





